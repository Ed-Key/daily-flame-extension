**Project Name:** Daily Flame (Chrome Extension)

### 🧠 Overview

Daily Flame is a Chrome extension that shows users a fullscreen Bible verse overlay each day before allowing them to use their browser. It uses the [scripture.api.bible](https://scripture.api.bible/) API for fetching verse text, and currently supports KJV and other public-domain translations. Users must read the verse and click a button to dismiss it.

### 🏗️ Current Architecture

**Tech Stack:**
- **React** + **TypeScript** + **Tailwind CSS**
- **Firebase Authentication** (Email/Password + Google OAuth)
- **Chrome Extension Manifest V3**
 **Webpack** build system

**Project Structure:**
```
src/
├── components/
│   ├── AuthContext.tsx          # Firebase auth state management
│   ├── VerseOverlay.tsx         # Main overlay with auth modals
│   ├── PasswordInput.tsx        # Password input with visibility toggle
│   ├── Toast.tsx                # Toast notification component
│   └── ToastContext.tsx         # Toast state management
├── services/
│   ├── firebase-config.ts       # Firebase configuration
│   └── verse-service.ts         # Bible API integration
├── background/
│   └── index.ts                 # Service worker with Google auth handling
├── content/
│   └── index.ts                 # Content script injection
├── newtab/
│   ├── index.tsx                # New tab page React component
│   └── newtab.html              # HTML template
├── admin/
│   └── index.tsx                # Admin portal (standalone page)
├── types/
│   └── index.ts                 # TypeScript definitions
└── styles/
    └── globals.css              # Tailwind CSS
```

### ⚙️ Current Working Features

**Core Functionality:**
- Daily verse overlay triggered on new tab or browser open (shown once per day)
- Verse display UI with text, reference, and dismiss button
- API integration for fetching Bible verses (KJV, WEB, WEB British, WEB Updated)
- Storage of daily-shown state via `chrome.storage.local`
x
**Authentication System:**
- Firebase Authentication with Email/Password and Google Sign-In
- Email verification requirement (except for admin@dailyflame.com)
- User profile management with display names and profile photos
- Admin role detection for enhanced features
- Toast notifications for user feedback
- Password visibility toggles and inline form validation

**User Interface:**
- Fullscreen verse overlay with glassmorphism design
- Sign-in/Sign-up modals with modern UI patterns
- Profile dropdown with user info and admin badges
- Remember me functionality
- Comprehensive error handling with user-friendly messages

**Admin Features:**
- Admin portal accessible via separate page (`admin/index.tsx`)
- Verse preview tool for testing different Bible references
- Admin controls embedded in verse overlay for authenticated admins
- Google Sign-In with account selection forcing
- Auth token clearing for testing different accounts

**Chrome Extension Integration:**
- Background service worker handling Google OAuth via `chrome.identity` API
- Content script injection for verse overlay display
- Message passing between background and content scripts
- New tab override with React-based landing page

### 🔧 Technical Implementation Details

**Authentication Flow:**
- Email/Password: Standard Firebase auth with email verification blocking
- Google Sign-In: Uses `chrome.identity` API to bypass CSP restrictions
- Profile photos fetched from Google User Info API
- Automatic sign-out after account creation (except admin) to enforce verification

**State Management:**
- React Context for authentication state
- React Context for toast notifications
- Chrome storage for daily verse tracking
- Firebase Auth for user persistence

**Error Handling:**
- Comprehensive Firebase error code mapping
- Inline validation with real-time feedback
- Toast notifications replacing browser alerts
- Debug logging throughout authentication flow

**Bible Verse System:**
- Daily verse fetching with caching
- Multiple translation support
- Admin verse preview functionality
- Verse reference validation

### 🎯 Current Status

The codebase has been fully migrated from vanilla JavaScript to React + TypeScript + Tailwind CSS. All authentication features are implemented with industry-standard patterns including email verification, password security, and comprehensive error handling. The extension successfully integrates Firebase Authentication within Chrome extension security constraints.

**Key Files:**
- `src/components/VerseOverlay.tsx` - Main component with verse display and auth modals
- `src/components/AuthContext.tsx` - Firebase authentication logic and state
- `src/background/index.ts` - Google OAuth handling and extension messaging
- `src/admin/index.tsx` - Standalone admin portal
- `manifest.json` - Extension configuration with Firebase permissions

**Authentication Status:**
- ✅ Email/Password sign-up with verification
- ✅ Google Sign-In with profile photo integration
- ✅ Email verification enforcement
- ✅ Admin role management
- ✅ Comprehensive error handling
- ✅ Modern UI patterns with accessibility

**Known Issues:**
- Email verification emails may experience delivery delays with certain providers
- Debug logging enabled for troubleshooting email delivery
