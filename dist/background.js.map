{"version":3,"file":"background.js","mappingssources":["webpack://dailyflame/./src/background/index-simple.ts"],"sourcesContent":["\"use strict\";\n// Simplified background script for Daily Flame Chrome Extension\n// Handles message routing and extension functionality\n// Offscreen document management\nconst OFFSCREEN_DOCUMENT_PATH = '/offscreen.html';\n// Track if offscreen document is created\nlet offscreenDocumentCreated = false;\n// Check if offscreen document already exists\nasync function hasOffscreenDocument() {\n    // For simplicity, we'll track it with a flag\n    // In production, you might want to use chrome.runtime.getContexts if available\n    return offscreenDocumentCreated;\n}\n// Create offscreen document if it doesn't exist\nasync function setupOffscreenDocument() {\n    if (await hasOffscreenDocument()) {\n        return;\n    }\n    try {\n        // @ts-ignore - chrome.offscreen is available with offscreen permission\n        await chrome.offscreen.createDocument({\n            url: chrome.runtime.getURL(OFFSCREEN_DOCUMENT_PATH),\n            // @ts-ignore\n            reasons: ['DOM_SCRAPING'],\n            justification: 'Firebase authentication requires DOM access'\n        });\n        offscreenDocumentCreated = true;\n    }\n    catch (error) {\n        console.error('Error creating offscreen document:', error);\n    }\n}\n// Close offscreen document\nasync function closeOffscreenDocument() {\n    if (!(await hasOffscreenDocument())) {\n        return;\n    }\n    try {\n        // @ts-ignore\n        await chrome.offscreen.closeDocument();\n        offscreenDocumentCreated = false;\n    }\n    catch (error) {\n        console.error('Error closing offscreen document:', error);\n    }\n}\n// Store auth state\nlet currentUser = null;\n// Helper function to store auth state in Chrome storage\nasync function storeAuthState(user) {\n    if (user) {\n        await chrome.storage.local.set({\n            authUser: {\n                uid: user.uid,\n                email: user.email,\n                displayName: user.displayName,\n                emailVerified: user.emailVerified,\n                photoURL: user.photoURL\n            },\n            authTimestamp: Date.now()\n        });\n        console.log('Background: Auth state stored in Chrome storage');\n    }\n    else {\n        await chrome.storage.local.remove(['authUser', 'authTimestamp']);\n        console.log('Background: Auth state cleared from Chrome storage');\n    }\n}\n// Helper function to retrieve auth state from Chrome storage\nasync function getStoredAuthState() {\n    const result = await chrome.storage.local.get(['authUser', 'authTimestamp']);\n    if (result.authUser && result.authTimestamp) {\n        // Check if auth state is still valid (24 hours)\n        const isExpired = Date.now() - result.authTimestamp > 24 * 60 * 60 * 1000;\n        if (!isExpired) {\n            console.log('Background: Retrieved valid auth state from Chrome storage');\n            return result.authUser;\n        }\n        else {\n            console.log('Background: Stored auth state expired');\n            await chrome.storage.local.remove(['authUser', 'authTimestamp']);\n        }\n    }\n    return null;\n}\n// Handle messages from content script and other parts of the extension\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    console.log('Background: Received message:', request.action);\n    if (request.action === 'injectVerseApp') {\n        // Inject the verse app script into the current tab\n        if (!sender.tab?.id) {\n            sendResponse({ success: false, error: 'No tab ID found' });\n            return;\n        }\n        chrome.scripting.executeScript({\n            target: { tabId: sender.tab.id },\n            files: ['verse-app.js']\n        }).then(() => {\n            console.log('Background: Verse app injected successfully');\n            sendResponse({ success: true });\n        }).catch(error => {\n            console.error('Background: Failed to inject verse app:', error);\n            sendResponse({ success: false, error: error.message });\n        });\n        return true; // Keep message channel open for async response\n    }\n    // Forward verse-related messages to the content script/verse app\n    if (request.action === 'getDailyVerse' ||\n        request.action === 'getVerse' ||\n        request.action === 'getStoredVerses' ||\n        request.action === 'saveVerses') {\n        // Forward the message to the active tab's content script\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n            if (tabs[0]?.id) {\n                chrome.tabs.sendMessage(tabs[0].id, request, (response) => {\n                    if (chrome.runtime.lastError) {\n                        sendResponse({ success: false, error: chrome.runtime.lastError.message });\n                    }\n                    else {\n                        sendResponse(response);\n                    }\n                });\n            }\n            else {\n                sendResponse({ success: false, error: 'No active tab found' });\n            }\n        });\n        return true; // Keep message channel open\n    }\n    if (request.action === 'getVerseShownDate') {\n        const today = new Date().toISOString().split(\"T\")[0];\n        chrome.storage.local.get(\"verseShownDate\", ({ verseShownDate }) => {\n            sendResponse({\n                success: true,\n                verseShownDate: verseShownDate,\n                today: today,\n                shouldShow: verseShownDate !== today\n            });\n        });\n        return true; // Keep message channel open for async response\n    }\n    if (request.action === 'setVerseShownDate') {\n        const today = new Date().toISOString().split(\"T\")[0];\n        chrome.storage.local.set({ verseShownDate: today }, () => {\n            console.log('Daily Flame: Verse shown for', today);\n            sendResponse({ success: true });\n        });\n        return true; // Keep message channel open for async response\n    }\n    if (request.action === 'clearStorage') {\n        chrome.storage.local.clear(() => {\n            console.log('Daily Flame: Storage cleared');\n            sendResponse({ success: true });\n        });\n        return true;\n    }\n    if (request.action === 'openAuthTab') {\n        // Handle opening authentication tab with offscreen document\n        console.log('Background: Opening auth tab with offscreen document');\n        handleAuthAction(request.authAction, request.authData)\n            .then(result => {\n            sendResponse(result);\n        })\n            .catch(error => {\n            console.error('Background: Auth error:', error);\n            const errorMessage = error instanceof Error ? error.message :\n                (typeof error === 'string' ? error : 'Authentication failed');\n            sendResponse({\n                success: false,\n                error: errorMessage\n            });\n        });\n        return true; // Keep message channel open for async response\n    }\n    // Handle auth state changes from offscreen document\n    if (request.action === 'authStateChanged') {\n        currentUser = request.user;\n        console.log('Background: Auth state changed:', currentUser ? 'User signed in' : 'User signed out');\n        // Store auth state in Chrome storage\n        storeAuthState(currentUser).then(() => {\n            // Notify all tabs about auth state change\n            chrome.tabs.query({}, (tabs) => {\n                tabs.forEach(tab => {\n                    if (tab.id) {\n                        chrome.tabs.sendMessage(tab.id, {\n                            action: 'authStateChanged',\n                            user: currentUser\n                        }).catch(() => {\n                            // Ignore errors for tabs that don't have our content script\n                        });\n                    }\n                });\n            });\n        });\n        return false; // No response needed\n    }\n    // Handle direct auth requests\n    if (request.action === 'auth') {\n        // Special handling for getCurrentUser to check stored auth state\n        if (request.authAction === 'getCurrentUser') {\n            getStoredAuthState().then(storedUser => {\n                if (storedUser) {\n                    currentUser = storedUser;\n                    sendResponse({ success: true, user: storedUser });\n                }\n                else {\n                    sendResponse({ success: true, user: null });\n                }\n            }).catch(error => {\n                console.error('Background: Error getting stored auth state:', error);\n                sendResponse({ success: true, user: null });\n            });\n            return true;\n        }\n        // Handle sendVerificationEmail\n        if (request.authAction === 'sendVerificationEmail') {\n            if (!currentUser) {\n                sendResponse({ success: false, error: 'No user signed in' });\n                return true;\n            }\n            handleAuthAction('sendVerificationEmail', request.authData)\n                .then(result => {\n                sendResponse(result);\n            })\n                .catch(error => {\n                console.error('Background: Error sending verification email:', error);\n                sendResponse({\n                    success: false,\n                    error: error.message || 'Failed to send verification email'\n                });\n            });\n            return true;\n        }\n        handleAuthAction(request.authAction, request.authData)\n            .then(result => {\n            // If sign-in was successful, store the user\n            if (result.success && result.user) {\n                currentUser = result.user;\n                storeAuthState(result.user);\n            }\n            // If sign-out was successful, clear the stored auth state\n            if (result.success && request.authAction === 'signOut') {\n                console.log('Background: Clearing auth state after sign-out');\n                currentUser = null;\n                storeAuthState(null).then(() => {\n                    // Notify all tabs about sign-out\n                    chrome.tabs.query({}, (tabs) => {\n                        tabs.forEach(tab => {\n                            if (tab.id) {\n                                chrome.tabs.sendMessage(tab.id, {\n                                    action: 'authStateChanged',\n                                    user: null\n                                }).catch(() => { });\n                            }\n                        });\n                    });\n                });\n            }\n            sendResponse(result);\n        })\n            .catch(error => {\n            console.error('Background: Auth error:', error);\n            const errorMessage = error instanceof Error ? error.message :\n                (typeof error === 'string' ? error : 'Authentication failed');\n            sendResponse({\n                success: false,\n                error: errorMessage\n            });\n        });\n        return true; // Keep message channel open for async response\n    }\n});\n// Handle authentication actions via offscreen document\nasync function handleAuthAction(action, data) {\n    await setupOffscreenDocument();\n    return new Promise((resolve, reject) => {\n        chrome.runtime.sendMessage({\n            target: 'offscreen-auth',\n            action: action,\n            ...data\n        }, (response) => {\n            if (chrome.runtime.lastError) {\n                reject(chrome.runtime.lastError);\n            }\n            else if (!response || typeof response !== 'object') {\n                reject(new Error('Invalid response from offscreen document'));\n            }\n            else if (!response.success) {\n                reject(response.error || new Error('Authentication failed'));\n            }\n            else {\n                resolve(response);\n            }\n        });\n    });\n}\n// Periodically verify auth state is still valid\nasync function verifyAuthState() {\n    if (!currentUser)\n        return;\n    try {\n        console.log('Background: Verifying auth state...');\n        const result = await handleAuthAction('verifyAuthState', {});\n        if (!result.isValid) {\n            console.log('Background: Auth state is no longer valid, clearing...');\n            currentUser = null;\n            await chrome.storage.local.remove(['authUser', 'authTimestamp']);\n            // Notify all tabs\n            chrome.tabs.query({}, (tabs) => {\n                tabs.forEach(tab => {\n                    if (tab.id) {\n                        chrome.tabs.sendMessage(tab.id, {\n                            action: 'authStateChanged',\n                            user: null\n                        }).catch(() => { });\n                    }\n                });\n            });\n        }\n    }\n    catch (error) {\n        console.error('Background: Error verifying auth state:', error);\n    }\n}\n// Set up periodic auth verification (every 5 minutes)\nsetInterval(verifyAuthState, 5 * 60 * 1000);\n// Handle extension icon clicks - always show verse overlay first\nchrome.action.onClicked.addListener((tab) => {\n    if (!tab.id || !tab.url) {\n        console.log('Background: No tab ID or URL available');\n        return;\n    }\n    // For restricted URLs and OAuth pages, open a new tab with a regular website\n    const skipSites = [\n        \"chrome://\",\n        \"chrome-extension://\",\n        \"moz-extension://\",\n        \"extensions\",\n        \"about:\",\n        \"file://\",\n        // OAuth and authentication URLs\n        \"accounts.google.com\",\n        \"oauth2.googleapis.com\",\n        \"auth.firebase.com\",\n        \"identitytoolkit.googleapis.com\",\n        \"securetoken.googleapis.com\",\n        // Microsoft Edge identity redirect\n        \"login.microsoftonline.com\",\n        \"login.live.com\"\n    ];\n    if (skipSites.some(site => tab.url.includes(site))) {\n        console.log('Background: Cannot inject into restricted/auth URL, opening new tab:', tab.url);\n        chrome.tabs.create({ url: 'https://www.google.com' }, (newTab) => {\n            if (newTab.id) {\n                // Wait a moment for the tab to load, then inject verse app\n                setTimeout(() => {\n                    // Clear storage first\n                    chrome.storage.local.remove(['verseShownDate'], () => {\n                        // Then inject the verse app\n                        chrome.scripting.executeScript({\n                            target: { tabId: newTab.id },\n                            files: ['verse-app.js']\n                        }).then(() => {\n                            console.log('Background: Verse app injected in new tab');\n                        }).catch((error) => {\n                            console.error('Background: Error injecting verse app in new tab:', error);\n                        });\n                    });\n                }, 1500);\n            }\n        });\n        return;\n    }\n    try {\n        // First clear the storage to force show\n        chrome.storage.local.remove(['verseShownDate'], () => {\n            // Then inject the verse app directly\n            chrome.scripting.executeScript({\n                target: { tabId: tab.id },\n                files: ['verse-app.js']\n            }).then(() => {\n                console.log('Background: Verse app injected via icon click');\n            }).catch((error) => {\n                console.error('Background: Error injecting verse app:', error);\n            });\n        });\n    }\n    catch (error) {\n        console.error('Background: Failed to execute script on tab:', tab.url, error);\n    }\n});\nchrome.runtime.onInstalled.addListener(() => {\n    console.log('Daily Flame extension installed');\n    // Check for stored auth state on extension startup\n    getStoredAuthState().then(storedUser => {\n        if (storedUser) {\n            currentUser = storedUser;\n            console.log('Background: Restored auth state from storage');\n        }\n    });\n    // Pre-warm offscreen document for faster first sign-in\n    console.log('Background: Pre-warming offscreen document');\n    setupOffscreenDocument().then(() => {\n        console.log('Background: Offscreen document ready');\n    }).catch(error => {\n        console.error('Background: Failed to pre-warm offscreen document:', error);\n    });\n});\n// Also check auth state when extension starts\ngetStoredAuthState().then(storedUser => {\n    if (storedUser) {\n        currentUser = storedUser;\n        console.log('Background: Restored auth state on startup');\n    }\n});\n// Pre-warm offscreen document on startup (not just install)\nsetupOffscreenDocument().catch(() => {\n    // Ignore errors on startup pre-warm\n});\nconsole.log('Background script loaded successfully');\n"],"names":[],"sourceRoot":""}