{"version":3,"file":"background.js","mappingspMA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://dailyflame/./src/services/verse-service.ts","webpack://dailyflame/./src/types/index.ts","webpack://dailyflame/webpack/bootstrap","webpack://dailyflame/webpack/runtime/define property getters","webpack://dailyflame/webpack/runtime/hasOwnProperty shorthand","webpack://dailyflame/webpack/runtime/make namespace object","webpack://dailyflame/./src/background/index.ts"],"sourcesContent":["import { BIBLE_VERSIONS } from '../types';\nexport class VerseService {\n    static async getBibles() {\n        try {\n            const response = await fetch(`${this.BASE_URL}/bibles`, {\n                headers: {\n                    'api-key': this.API_KEY\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`API request failed: ${response.status}`);\n            }\n            const data = await response.json();\n            return data.data || [];\n        }\n        catch (error) {\n            console.error('Error fetching Bibles:', error);\n            throw error;\n        }\n    }\n    static async getVerse(reference, bibleId = BIBLE_VERSIONS.KJV) {\n        try {\n            const apiReference = this.convertReferenceToApiFormat(reference);\n            const url = `${this.BASE_URL}/bibles/${bibleId}/passages/${apiReference}?content-type=text&include-notes=false&include-titles=false&include-chapter-numbers=false&include-verse-numbers=false`;\n            console.log('Daily Flame API Call:', {\n                reference: reference,\n                apiReference: apiReference,\n                bibleId: bibleId,\n                url: url\n            });\n            const response = await fetch(url, {\n                headers: {\n                    'api-key': this.API_KEY\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`API request failed: ${response.status} - ${response.statusText}`);\n            }\n            const data = await response.json();\n            if (!data.data || !data.data.content) {\n                throw new Error('No verse content found');\n            }\n            // Clean up the text content\n            let text = data.data.content;\n            text = text.replace(/[\\r\\n]+/g, ' ').trim();\n            text = text.replace(/\\s+/g, ' ');\n            return {\n                text: text,\n                reference: data.data.reference || reference,\n                bibleId: bibleId\n            };\n        }\n        catch (error) {\n            console.error('Error fetching verse:', error);\n            throw error;\n        }\n    }\n    static async getRandomVerse(verseList) {\n        try {\n            const verses = verseList || await this.getStoredVerses();\n            if (!verses || verses.length === 0) {\n                throw new Error('No verses available');\n            }\n            const randomIndex = Math.floor(Math.random() * verses.length);\n            const selectedVerse = verses[randomIndex];\n            return await this.getVerse(selectedVerse.reference, selectedVerse.bibleId);\n        }\n        catch (error) {\n            console.error('Error getting random verse:', error);\n            throw error;\n        }\n    }\n    static async getDailyVerse() {\n        try {\n            const verses = await this.getStoredVerses();\n            if (!verses || verses.length === 0) {\n                throw new Error('No verses configured');\n            }\n            // Use date as seed for consistent daily verse\n            const today = new Date();\n            const dayOfYear = Math.floor((today.getTime() - new Date(today.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));\n            const verseIndex = dayOfYear % verses.length;\n            const selectedVerse = verses[verseIndex];\n            return await this.getVerse(selectedVerse.reference, selectedVerse.bibleId);\n        }\n        catch (error) {\n            console.error('Error getting daily verse:', error);\n            throw error;\n        }\n    }\n    static async getStoredVerses() {\n        return new Promise((resolve) => {\n            chrome.storage.local.get('verseList', (result) => {\n                resolve(result.verseList || this.getDefaultVerses());\n            });\n        });\n    }\n    static async saveVerses(verses) {\n        return new Promise((resolve) => {\n            chrome.storage.local.set({ verseList: verses }, () => {\n                resolve(true);\n            });\n        });\n    }\n    static getDefaultVerses() {\n        const kjvId = BIBLE_VERSIONS.KJV;\n        return [\n            { reference: 'John 3:16', bibleId: kjvId, translation: 'KJV', dateAdded: new Date().toISOString() },\n            { reference: 'Jeremiah 29:11', bibleId: kjvId, translation: 'KJV', dateAdded: new Date().toISOString() },\n            { reference: 'Philippians 4:13', bibleId: kjvId, translation: 'KJV', dateAdded: new Date().toISOString() },\n            { reference: 'Romans 8:28', bibleId: kjvId, translation: 'KJV', dateAdded: new Date().toISOString() },\n            { reference: 'Joshua 1:9', bibleId: kjvId, translation: 'KJV', dateAdded: new Date().toISOString() },\n            { reference: 'Proverbs 3:5-6', bibleId: kjvId, translation: 'KJV', dateAdded: new Date().toISOString() },\n            { reference: '1 Peter 5:7', bibleId: kjvId, translation: 'KJV', dateAdded: new Date().toISOString() }\n        ];\n    }\n    static convertReferenceToApiFormat(reference) {\n        const bookMappings = {\n            // Old Testament\n            'genesis': 'GEN', 'gen': 'GEN',\n            'exodus': 'EXO', 'exo': 'EXO', 'ex': 'EXO',\n            'leviticus': 'LEV', 'lev': 'LEV',\n            'numbers': 'NUM', 'num': 'NUM',\n            'deuteronomy': 'DEU', 'deut': 'DEU', 'deu': 'DEU',\n            'joshua': 'JOS', 'josh': 'JOS', 'jos': 'JOS',\n            'judges': 'JDG', 'judg': 'JDG', 'jdg': 'JDG',\n            'ruth': 'RUT', 'rut': 'RUT',\n            '1 samuel': '1SA', '1samuel': '1SA', '1sa': '1SA', '1 sam': '1SA', '1sam': '1SA',\n            '2 samuel': '2SA', '2samuel': '2SA', '2sa': '2SA', '2 sam': '2SA', '2sam': '2SA',\n            '1 kings': '1KI', '1kings': '1KI', '1ki': '1KI', '1 kgs': '1KI', '1kgs': '1KI',\n            '2 kings': '2KI', '2kings': '2KI', '2ki': '2KI', '2 kgs': '2KI', '2kgs': '2KI',\n            'psalms': 'PSA', 'psalm': 'PSA', 'psa': 'PSA', 'ps': 'PSA',\n            'proverbs': 'PRO', 'prov': 'PRO', 'pro': 'PRO',\n            'ecclesiastes': 'ECC', 'eccl': 'ECC', 'ecc': 'ECC',\n            'isaiah': 'ISA', 'isa': 'ISA',\n            'jeremiah': 'JER', 'jer': 'JER',\n            'ezekiel': 'EZK', 'ezek': 'EZK', 'ezk': 'EZK',\n            'daniel': 'DAN', 'dan': 'DAN',\n            // New Testament\n            'matthew': 'MAT', 'matt': 'MAT', 'mat': 'MAT', 'mt': 'MAT',\n            'mark': 'MRK', 'mrk': 'MRK', 'mk': 'MRK',\n            'luke': 'LUK', 'luk': 'LUK', 'lk': 'LUK',\n            'john': 'JHN', 'jhn': 'JHN', 'jn': 'JHN',\n            'acts': 'ACT', 'act': 'ACT',\n            'romans': 'ROM', 'rom': 'ROM',\n            '1 corinthians': '1CO', '1corinthians': '1CO', '1co': '1CO', '1 cor': '1CO', '1cor': '1CO',\n            '2 corinthians': '2CO', '2corinthians': '2CO', '2co': '2CO', '2 cor': '2CO', '2cor': '2CO',\n            'galatians': 'GAL', 'gal': 'GAL',\n            'ephesians': 'EPH', 'eph': 'EPH',\n            'philippians': 'PHP', 'phil': 'PHP', 'php': 'PHP',\n            'colossians': 'COL', 'col': 'COL',\n            '1 thessalonians': '1TH', '1thessalonians': '1TH', '1th': '1TH', '1 thess': '1TH', '1thess': '1TH',\n            '2 thessalonians': '2TH', '2thessalonians': '2TH', '2th': '2TH', '2 thess': '2TH', '2thess': '2TH',\n            '1 timothy': '1TI', '1timothy': '1TI', '1ti': '1TI', '1 tim': '1TI', '1tim': '1TI',\n            '2 timothy': '2TI', '2timothy': '2TI', '2ti': '2TI', '2 tim': '2TI', '2tim': '2TI',\n            'titus': 'TIT', 'tit': 'TIT',\n            'philemon': 'PHM', 'phlm': 'PHM', 'phm': 'PHM',\n            'hebrews': 'HEB', 'heb': 'HEB',\n            'james': 'JAS', 'jas': 'JAS',\n            '1 peter': '1PE', '1peter': '1PE', '1pe': '1PE', '1 pet': '1PE', '1pet': '1PE',\n            '2 peter': '2PE', '2peter': '2PE', '2pe': '2PE', '2 pet': '2PE', '2pet': '2PE',\n            '1 john': '1JN', '1john': '1JN', '1jn': '1JN', '1 jn': '1JN',\n            '2 john': '2JN', '2john': '2JN', '2jn': '2JN', '2 jn': '2JN',\n            '3 john': '3JN', '3john': '3JN', '3jn': '3JN', '3 jn': '3JN',\n            'jude': 'JUD', 'jud': 'JUD',\n            'revelation': 'REV', 'rev': 'REV'\n        };\n        try {\n            const match = reference.match(/^([123]?\\s*[a-zA-Z]+)\\s+(\\d+):(\\d+)(?:-(\\d+))?$/i);\n            if (!match) {\n                throw new Error(`Invalid reference format: ${reference}`);\n            }\n            const [, bookName, chapter, startVerse, endVerse] = match;\n            const bookKey = bookName.toLowerCase().trim();\n            const bookCode = bookMappings[bookKey];\n            if (!bookCode) {\n                throw new Error(`Unknown book: ${bookName}`);\n            }\n            if (endVerse) {\n                return `${bookCode}.${chapter}.${startVerse}-${bookCode}.${chapter}.${endVerse}`;\n            }\n            else {\n                return `${bookCode}.${chapter}.${startVerse}`;\n            }\n        }\n        catch (error) {\n            console.error('Reference conversion error:', error);\n            return reference.replace(/\\s+/g, '');\n        }\n    }\n    static isValidReference(reference) {\n        const referencePattern = /^[1-3]?\\s*[A-Za-z]+\\s+\\d+:\\d+(-\\d+)?$/;\n        return referencePattern.test(reference.trim());\n    }\n}\nVerseService.API_KEY = '58410e50f19ea158ea4902e05191db02';\nVerseService.BASE_URL = 'https://api.scripture.api.bible/v1';\n","// Bible translation mappings\nexport const BIBLE_VERSIONS = {\n    'KJV': 'de4e12af7f28f599-02',\n    'WEB': '9879dbb7cfe39e4d-04',\n    'WEB_BRITISH': '7142879509583d59-04',\n    'WEB_UPDATED': '72f4e6dc683324df-03'\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { VerseService } from '../services/verse-service';\n// Google Sign-In handler using chrome.identity API\nasync function handleGoogleSignIn() {\n    console.log('Background: Starting Google Sign-In process');\n    return new Promise((resolve, reject) => {\n        // Force account selection by using 'any' account parameter\n        chrome.identity.getAuthToken({\n            interactive: true,\n            account: { id: 'any' } // Force account picker\n        }, async (result) => {\n            if (chrome.runtime.lastError || !result) {\n                console.error('Background: Google Sign-In failed', chrome.runtime.lastError);\n                reject(new Error(chrome.runtime.lastError?.message || 'Failed to get auth token'));\n                return;\n            }\n            // Extract token from result (could be string or object depending on API version)\n            const authToken = typeof result === 'string' ? result : result.token;\n            if (!authToken) {\n                reject(new Error('No auth token received'));\n                return;\n            }\n            console.log('Background: Google Sign-In successful, token received');\n            // Fetch user info from Google API to get profile photo and details\n            try {\n                const userInfoResponse = await fetch(`https://www.googleapis.com/oauth2/v2/userinfo?access_token=${authToken}`);\n                if (!userInfoResponse.ok) {\n                    console.warn('Background: Failed to fetch user info, proceeding with token only');\n                    resolve({ token: authToken, userInfo: null });\n                    return;\n                }\n                const userInfo = await userInfoResponse.json();\n                console.log('Background: User info fetched successfully');\n                resolve({ token: authToken, userInfo });\n            }\n            catch (error) {\n                console.warn('Background: Error fetching user info:', error);\n                resolve({ token: authToken, userInfo: null });\n            }\n        });\n    });\n}\n// Clear all cached auth tokens for testing different accounts\nasync function clearAuthTokens() {\n    console.log('Background: Clearing all cached auth tokens');\n    return new Promise((resolve, reject) => {\n        // First, try to get current token to revoke it\n        chrome.identity.getAuthToken({ interactive: false }, (result) => {\n            const token = typeof result === 'string' ? result : result?.token;\n            if (token) {\n                // Revoke the token first\n                chrome.identity.removeCachedAuthToken({ token }, () => {\n                    console.log('Background: Removed cached token');\n                });\n            }\n            // Then clear all cached tokens\n            chrome.identity.clearAllCachedAuthTokens(() => {\n                if (chrome.runtime.lastError) {\n                    console.error('Background: Error clearing auth tokens', chrome.runtime.lastError);\n                    reject(new Error(chrome.runtime.lastError.message));\n                    return;\n                }\n                console.log('Background: All auth tokens cleared successfully');\n                resolve();\n            });\n        });\n    });\n}\n// Handle messages from content script and other parts of the extension\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.action === 'getVerseShownDate') {\n        const today = new Date().toISOString().split(\"T\")[0];\n        chrome.storage.local.get(\"verseShownDate\", ({ verseShownDate }) => {\n            sendResponse({\n                success: true,\n                verseShownDate: verseShownDate,\n                today: today,\n                shouldShow: verseShownDate !== today\n            });\n        });\n        return true; // Keep message channel open for async response\n    }\n    if (request.action === 'setVerseShownDate') {\n        const today = new Date().toISOString().split(\"T\")[0];\n        chrome.storage.local.set({ verseShownDate: today }, () => {\n            console.log('Daily Flame: Verse shown for', today);\n            sendResponse({ success: true });\n        });\n        return true; // Keep message channel open for async response\n    }\n    if (request.action === 'clearStorage') {\n        chrome.storage.local.clear(() => {\n            console.log('Daily Flame: Storage cleared');\n            sendResponse({ success: true });\n        });\n        return true;\n    }\n    if (request.action === 'getDailyVerse') {\n        VerseService.getDailyVerse()\n            .then(verse => {\n            sendResponse({ success: true, verse: verse });\n        })\n            .catch(error => {\n            console.error('Error fetching daily verse:', error);\n            sendResponse({ success: false, error: error.message });\n        });\n        return true; // Keep message channel open for async response\n    }\n    if (request.action === 'getVerse') {\n        VerseService.getVerse(request.reference, request.bibleId)\n            .then(verse => {\n            sendResponse({ success: true, verse: verse });\n        })\n            .catch(error => {\n            console.error('Error fetching verse:', error);\n            sendResponse({ success: false, error: error.message });\n        });\n        return true; // Keep message channel open for async response\n    }\n    if (request.action === 'saveVerses') {\n        VerseService.saveVerses(request.verses)\n            .then(() => {\n            sendResponse({ success: true });\n        })\n            .catch(error => {\n            console.error('Error saving verses:', error);\n            sendResponse({ success: false, error: error.message });\n        });\n        return true; // Keep message channel open for async response\n    }\n    if (request.action === 'getStoredVerses') {\n        VerseService.getStoredVerses()\n            .then(verses => {\n            sendResponse({ success: true, verses: verses });\n        })\n            .catch(error => {\n            console.error('Error getting stored verses:', error);\n            sendResponse({ success: false, error: error.message });\n        });\n        return true; // Keep message channel open for async response\n    }\n    if (request.action === 'googleSignIn') {\n        handleGoogleSignIn()\n            .then(result => {\n            sendResponse({\n                success: true,\n                token: result.token,\n                userInfo: result.userInfo\n            });\n        })\n            .catch(error => {\n            console.error('Background: Error with Google sign-in:', error);\n            sendResponse({ success: false, error: error.message });\n        });\n        return true; // Keep message channel open for async response\n    }\n    if (request.action === 'clearAuthTokens') {\n        clearAuthTokens()\n            .then(() => {\n            sendResponse({ success: true });\n        })\n            .catch(error => {\n            console.error('Background: Error clearing auth tokens:', error);\n            sendResponse({ success: false, error: error.message });\n        });\n        return true; // Keep message channel open for async response\n    }\n});\n// Handle extension icon clicks - always show verse overlay first\nchrome.action.onClicked.addListener((tab) => {\n    if (!tab.id || !tab.url) {\n        console.log('Background: No tab ID or URL available');\n        return;\n    }\n    // For restricted URLs, open a new tab with a regular website\n    const skipSites = [\"chrome://\", \"chrome-extension://\", \"moz-extension://\", \"extensions\", \"about:\", \"file://\"];\n    if (skipSites.some(site => tab.url.includes(site))) {\n        console.log('Background: Cannot inject into restricted URL, opening new tab:', tab.url);\n        chrome.tabs.create({ url: 'https://www.google.com' }, (newTab) => {\n            if (newTab.id) {\n                // Wait a moment for the tab to load, then show verse overlay\n                setTimeout(() => {\n                    chrome.scripting.executeScript({\n                        target: { tabId: newTab.id },\n                        func: () => {\n                            // Clear storage and show verse overlay\n                            if (typeof window.resetDailyFlame === 'function') {\n                                window.resetDailyFlame();\n                            }\n                        }\n                    }).catch((error) => {\n                        console.error('Background: Error injecting script in new tab:', error);\n                    });\n                }, 1500);\n            }\n        });\n        return;\n    }\n    try {\n        // For regular URLs, inject content script to show verse overlay\n        chrome.scripting.executeScript({\n            target: { tabId: tab.id },\n            func: () => {\n                // Always show verse overlay first when icon is clicked (clear storage to force show)\n                if (typeof window.resetDailyFlame === 'function') {\n                    window.resetDailyFlame();\n                }\n            }\n        }).catch((error) => {\n            console.error('Background: Error injecting script:', error);\n        });\n    }\n    catch (error) {\n        console.error('Background: Failed to execute script on tab:', tab.url, error);\n    }\n});\nchrome.runtime.onInstalled.addListener(() => {\n    console.log('Daily Flame extension installed');\n});\n"],"names":[],"sourceRoot":""}