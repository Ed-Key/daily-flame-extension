{"version":3,"file":"content.js","mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://dailyflame/./src/utils/date-utils.ts","webpack://dailyflame/webpack/bootstrap","webpack://dailyflame/webpack/runtime/define property getters","webpack://dailyflame/webpack/runtime/hasOwnProperty shorthand","webpack://dailyflame/webpack/runtime/make namespace object","webpack://dailyflame/./src/content/monitor.ts"],"sourcesContent":["/**\n * Date utility functions for DailyFlame\n * Ensures consistent date handling across the application\n */\n/**\n * Get the current date in the user's local timezone as YYYY-MM-DD string\n * This ensures verse changes happen at midnight in the user's timezone,\n * not at midnight UTC\n */\nexport function getLocalDateString(date = new Date()) {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n}\n/**\n * Parse a YYYY-MM-DD string into a Date object in local timezone\n * Useful for comparing dates or calculating date differences\n */\nexport function parseLocalDateString(dateString) {\n    const [year, month, day] = dateString.split('-').map(Number);\n    return new Date(year, month - 1, day);\n}\n/**\n * Get the day of year (1-365/366) for a given date\n * Used for deterministic verse selection based on date\n */\nexport function getDayOfYear(date = new Date()) {\n    const startOfYear = new Date(date.getFullYear(), 0, 0);\n    const diff = date.getTime() - startOfYear.getTime();\n    const oneDay = 1000 * 60 * 60 * 24;\n    return Math.floor(diff / oneDay);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Minimal monitor script - only checks if verse should be shown\n// No heavy imports - just Chrome API calls\nimport { getLocalDateString } from '../utils/date-utils';\nconsole.log('Daily Flame: Monitor initialized');\nasync function checkAndLoadVerse() {\n    try {\n        // Check if verse was already shown today\n        const result = await chrome.storage.local.get(['verseShownDate']);\n        const today = getLocalDateString();\n        if (result.verseShownDate === today) {\n            console.log('Daily Flame: Verse already shown today');\n            return; // Exit early - no need to load anything\n        }\n        // Check if we're on a restricted URL or OAuth page\n        const skipSites = [\n            \"chrome://\",\n            \"chrome-extension://\",\n            \"moz-extension://\",\n            \"extensions\",\n            \"about:\",\n            \"file://\",\n            // OAuth and authentication URLs\n            \"accounts.google.com\",\n            \"oauth2.googleapis.com\",\n            \"auth.firebase.com\",\n            \"identitytoolkit.googleapis.com\",\n            \"securetoken.googleapis.com\",\n            // Microsoft Edge identity redirect\n            \"login.microsoftonline.com\",\n            \"login.live.com\"\n        ];\n        if (skipSites.some(site => window.location.href.includes(site))) {\n            console.log('Daily Flame: Skipping restricted/auth URL:', window.location.href);\n            return;\n        }\n        console.log('Daily Flame: Loading verse module...');\n        // Send message to background script to inject verse app\n        chrome.runtime.sendMessage({ action: 'injectVerseApp' }, (response) => {\n            if (chrome.runtime.lastError) {\n                console.error('Daily Flame: Failed to inject verse app:', chrome.runtime.lastError);\n                return;\n            }\n            if (response && response.success) {\n                console.log('Daily Flame: Verse app injected successfully');\n                // The injected script will handle initialization\n            }\n            else {\n                console.error('Daily Flame: Failed to inject verse app:', response?.error || 'Unknown error');\n            }\n        });\n    }\n    catch (error) {\n        console.error('Daily Flame: Error in monitor script:', error);\n    }\n}\n// Check on page load\ncheckAndLoadVerse();\n// Global function to reset and show verse (for extension icon clicks)\nwindow.resetDailyFlame = async function () {\n    console.log('Daily Flame: Manual reset triggered');\n    try {\n        // Clear the storage to force showing verse\n        await chrome.storage.local.remove(['verseShownDate']);\n        // Send message to background script to inject verse app\n        chrome.runtime.sendMessage({ action: 'injectVerseApp' }, (response) => {\n            if (chrome.runtime.lastError) {\n                console.error('Daily Flame: Failed to inject verse app:', chrome.runtime.lastError);\n                return;\n            }\n            if (response && response.success) {\n                console.log('Daily Flame: Verse app injected after reset');\n            }\n            else {\n                console.error('Daily Flame: Failed to inject verse app:', response?.error || 'Unknown error');\n            }\n        });\n    }\n    catch (error) {\n        console.error('Daily Flame: Error during reset:', error);\n    }\n};\n"],"names":[],"sourceRoot":""}