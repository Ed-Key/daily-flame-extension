{"version":3,"file":"content.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://dailyflame/./src/content/monitor.ts"],"sourcesContent":["\"use strict\";\n// Minimal monitor script - only checks if verse should be shown\n// No heavy imports - just Chrome API calls\nconsole.log('Daily Flame: Monitor initialized');\nasync function checkAndLoadVerse() {\n    try {\n        // Check if verse was already shown today\n        const result = await chrome.storage.local.get(['verseShownDate']);\n        const today = new Date().toISOString().split(\"T\")[0];\n        if (result.verseShownDate === today) {\n            console.log('Daily Flame: Verse already shown today');\n            return; // Exit early - no need to load anything\n        }\n        // Check if we're on a restricted URL or OAuth page\n        const skipSites = [\n            \"chrome://\",\n            \"chrome-extension://\",\n            \"moz-extension://\",\n            \"extensions\",\n            \"about:\",\n            \"file://\",\n            // OAuth and authentication URLs\n            \"accounts.google.com\",\n            \"oauth2.googleapis.com\",\n            \"auth.firebase.com\",\n            \"identitytoolkit.googleapis.com\",\n            \"securetoken.googleapis.com\",\n            // Microsoft Edge identity redirect\n            \"login.microsoftonline.com\",\n            \"login.live.com\"\n        ];\n        if (skipSites.some(site => window.location.href.includes(site))) {\n            console.log('Daily Flame: Skipping restricted/auth URL:', window.location.href);\n            return;\n        }\n        console.log('Daily Flame: Loading verse module...');\n        // Send message to background script to inject verse app\n        chrome.runtime.sendMessage({ action: 'injectVerseApp' }, (response) => {\n            if (chrome.runtime.lastError) {\n                console.error('Daily Flame: Failed to inject verse app:', chrome.runtime.lastError);\n                return;\n            }\n            if (response && response.success) {\n                console.log('Daily Flame: Verse app injected successfully');\n                // The injected script will handle initialization\n            }\n            else {\n                console.error('Daily Flame: Failed to inject verse app:', response?.error || 'Unknown error');\n            }\n        });\n    }\n    catch (error) {\n        console.error('Daily Flame: Error in monitor script:', error);\n    }\n}\n// Check on page load\ncheckAndLoadVerse();\n// Global function to reset and show verse (for extension icon clicks)\nwindow.resetDailyFlame = async function () {\n    console.log('Daily Flame: Manual reset triggered');\n    try {\n        // Clear the storage to force showing verse\n        await chrome.storage.local.remove(['verseShownDate']);\n        // Send message to background script to inject verse app\n        chrome.runtime.sendMessage({ action: 'injectVerseApp' }, (response) => {\n            if (chrome.runtime.lastError) {\n                console.error('Daily Flame: Failed to inject verse app:', chrome.runtime.lastError);\n                return;\n            }\n            if (response && response.success) {\n                console.log('Daily Flame: Verse app injected after reset');\n            }\n            else {\n                console.error('Daily Flame: Failed to inject verse app:', response?.error || 'Unknown error');\n            }\n        });\n    }\n    catch (error) {\n        console.error('Daily Flame: Error during reset:', error);\n    }\n};\n"],"names":[],"sourceRoot":""}