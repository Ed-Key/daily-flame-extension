{"version":3,"file":"offscreen.js","mappingssources":["webpack://dailyflame/./src/offscreen.ts"],"sourcesContent":["\"use strict\";\n// URL of the hosted authentication handler\nconst AUTH_HANDLER_URL = 'https://daily-flame.web.app/auth-handler.html';\n// Create iframe for authentication\nlet iframe = null;\nlet isIframeReady = false;\n// Queue for auth requests that arrive before iframe is ready\nconst authRequestQueue = [];\n// Process queued auth requests\nfunction processQueuedRequests() {\n    while (authRequestQueue.length > 0) {\n        const { request, sendResponse } = authRequestQueue.shift();\n        handleAuthRequest(request, sendResponse);\n    }\n}\n// Initialize the authentication iframe\nfunction initializeAuthFrame() {\n    if (iframe)\n        return;\n    console.log('Offscreen: Creating auth iframe');\n    iframe = document.createElement('iframe');\n    iframe.src = AUTH_HANDLER_URL;\n    iframe.style.display = 'none';\n    // Set ready state when iframe loads\n    iframe.onload = () => {\n        console.log('Offscreen: Auth iframe loaded');\n        // Give it a moment for any initialization\n        setTimeout(() => {\n            if (!isIframeReady) {\n                console.log('Offscreen: Setting iframe ready after load');\n                isIframeReady = true;\n                processQueuedRequests();\n            }\n        }, 500);\n    };\n    // Also listen for explicit ready message as backup\n    window.addEventListener('message', (event) => {\n        if (event.origin === new URL(AUTH_HANDLER_URL).origin && event.data.ready) {\n            console.log('Offscreen: Auth iframe signaled ready');\n            isIframeReady = true;\n            processQueuedRequests();\n        }\n    });\n    // Force ready state after timeout as final fallback\n    setTimeout(() => {\n        if (!isIframeReady) {\n            console.log('Offscreen: Force setting iframe ready after timeout');\n            isIframeReady = true;\n            processQueuedRequests();\n        }\n    }, 3000);\n    document.body.appendChild(iframe);\n}\n// Initialize iframe when offscreen document loads\ninitializeAuthFrame();\n// Listen for messages from the background script\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.target !== 'offscreen-auth') {\n        return false;\n    }\n    // If iframe is not ready, queue the request\n    if (!isIframeReady) {\n        console.log('Offscreen: Iframe not ready, queuing auth request');\n        authRequestQueue.push({ request, sendResponse });\n    }\n    else {\n        handleAuthRequest(request, sendResponse);\n    }\n    return true; // Will respond asynchronously\n});\nasync function handleAuthRequest(request, sendResponse) {\n    console.log('Offscreen: Handling auth request:', request.action);\n    let attempts = 0;\n    const maxAttempts = 3;\n    let responseReceived = false;\n    let responseHandler = null;\n    function attemptAuth() {\n        attempts++;\n        console.log(`Offscreen: Auth attempt ${attempts} of ${maxAttempts}`);\n        // Set up message listener for the response\n        responseHandler = (event) => {\n            if (event.origin !== new URL(AUTH_HANDLER_URL).origin) {\n                return;\n            }\n            // Filter out Google's internal iframe messages\n            if (typeof event.data === 'string' && event.data.startsWith('!_')) {\n                console.log('Offscreen: Ignoring Google internal message');\n                return;\n            }\n            // Only accept messages with expected auth response format\n            if (!event.data || typeof event.data !== 'object' || !('success' in event.data)) {\n                console.log('Offscreen: Ignoring malformed message:', event.data);\n                return;\n            }\n            // Mark response as received\n            responseReceived = true;\n            // Remove listener after receiving response\n            window.removeEventListener('message', responseHandler);\n            console.log('Offscreen: Received response from iframe:', event.data);\n            sendResponse(event.data);\n        };\n        window.addEventListener('message', responseHandler);\n        // Send request to iframe\n        if (iframe && iframe.contentWindow) {\n            const message = {\n                action: request.action,\n                email: request.email,\n                password: request.password\n            };\n            console.log('Offscreen: Sending message to iframe:', message);\n            iframe.contentWindow.postMessage(message, AUTH_HANDLER_URL);\n            // Set timeout for retry\n            setTimeout(() => {\n                if (!responseReceived) {\n                    window.removeEventListener('message', responseHandler);\n                    if (attempts < maxAttempts) {\n                        console.log('Offscreen: No response from iframe, retrying...');\n                        attemptAuth();\n                    }\n                    else {\n                        console.error('Offscreen: Failed to get response from iframe after', maxAttempts, 'attempts');\n                        sendResponse({\n                            success: false,\n                            error: {\n                                code: 'iframe-timeout',\n                                message: 'Authentication iframe not responding'\n                            }\n                        });\n                    }\n                }\n            }, 5000); // 5 second timeout per attempt\n        }\n        else {\n            if (responseHandler) {\n                window.removeEventListener('message', responseHandler);\n            }\n            sendResponse({\n                success: false,\n                error: {\n                    code: 'iframe-not-found',\n                    message: 'Authentication iframe not initialized'\n                }\n            });\n        }\n    }\n    attemptAuth();\n}\n// Listen for auth state changes from the iframe and forward to background\nwindow.addEventListener('message', (event) => {\n    if (event.origin !== new URL(AUTH_HANDLER_URL).origin) {\n        return;\n    }\n    // Filter out Google's internal iframe messages\n    if (typeof event.data === 'string' && event.data.startsWith('!_')) {\n        return;\n    }\n    // Handle auth state change notifications\n    if (event.data && typeof event.data === 'object' && event.data.type === 'authStateChanged') {\n        console.log('Offscreen: Forwarding auth state change to background');\n        chrome.runtime.sendMessage({\n            action: 'authStateChanged',\n            user: event.data.user\n        });\n    }\n});\n"],"names":[],"sourceRoot":""}