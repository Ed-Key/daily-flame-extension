{"version":3,"file":"offscreen.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://dailyflame/./src/offscreen.ts"],"sourcesContent":["\"use strict\";\n// URL of the hosted authentication handler\nconst AUTH_HANDLER_URL = 'https://daily-flame.web.app/auth-handler.html';\n// Create iframe for authentication\nlet iframe = null;\nlet isIframeReady = false;\n// Initialize the authentication iframe\nfunction initializeAuthFrame() {\n    if (iframe)\n        return;\n    iframe = document.createElement('iframe');\n    iframe.src = AUTH_HANDLER_URL;\n    iframe.style.display = 'none';\n    document.body.appendChild(iframe);\n    // Wait for iframe to signal it's ready\n    window.addEventListener('message', (event) => {\n        if (event.origin === new URL(AUTH_HANDLER_URL).origin && event.data.ready) {\n            isIframeReady = true;\n            console.log('Offscreen: Auth iframe is ready');\n        }\n    });\n}\n// Initialize iframe when offscreen document loads\ninitializeAuthFrame();\n// Listen for messages from the background script\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    if (request.target !== 'offscreen-auth') {\n        return false;\n    }\n    handleAuthRequest(request, sendResponse);\n    return true; // Will respond asynchronously\n});\nasync function handleAuthRequest(request, sendResponse) {\n    console.log('Offscreen: Handling auth request:', request.action);\n    // Wait for iframe to be ready\n    if (!isIframeReady) {\n        console.log('Offscreen: Waiting for iframe to be ready...');\n        let attempts = 0;\n        const maxAttempts = 50; // 5 seconds max wait\n        const waitForReady = setInterval(() => {\n            attempts++;\n            if (isIframeReady) {\n                clearInterval(waitForReady);\n                proceedWithAuth();\n            }\n            else if (attempts >= maxAttempts) {\n                clearInterval(waitForReady);\n                sendResponse({\n                    success: false,\n                    error: {\n                        code: 'timeout',\n                        message: 'Authentication iframe failed to load'\n                    }\n                });\n            }\n        }, 100);\n    }\n    else {\n        proceedWithAuth();\n    }\n    function proceedWithAuth() {\n        // Set up one-time message listener for the response\n        const responseHandler = (event) => {\n            if (event.origin !== new URL(AUTH_HANDLER_URL).origin) {\n                return;\n            }\n            // Remove listener after receiving response\n            window.removeEventListener('message', responseHandler);\n            console.log('Offscreen: Received response from iframe:', event.data);\n            sendResponse(event.data);\n        };\n        window.addEventListener('message', responseHandler);\n        // Send request to iframe\n        if (iframe && iframe.contentWindow) {\n            const message = {\n                action: request.action,\n                email: request.email,\n                password: request.password\n            };\n            console.log('Offscreen: Sending message to iframe:', message);\n            iframe.contentWindow.postMessage(message, AUTH_HANDLER_URL);\n        }\n        else {\n            window.removeEventListener('message', responseHandler);\n            sendResponse({\n                success: false,\n                error: {\n                    code: 'iframe-not-found',\n                    message: 'Authentication iframe not initialized'\n                }\n            });\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}